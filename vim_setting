set nocompatible

set shell=/bin/bash

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'ervandew/supertab'
Plugin 'nanotech/jellybeans.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'airblade/vim-gitgutter' " vim with git status(added, modified, and removed lines)
Plugin 'tpope/vim-fugitive' " vim with git command(e.g., Gdiff)
Plugin 'vim-airline/vim-airline' " vim status bar
Plugin 'vim-airline/vim-airline-themes'
Plugin 'blueyed/vim-diminactive'
Plugin 'danro/rename.vim'

Plugin 'jiangmiao/auto-pairs'
Plugin 'preservim/nerdcommenter' " 주석 생성 \ci
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-surround' " ysiw\" cs\"\' ds\" yss\"
Plugin 't9md/vim-choosewin'
"Plugin 'jnwhiteh/vim-golang'

"Plugin 'fatih/vim-go'
Plugin 'scrooloose/syntastic'

call vundle#end()

set t_Co=256

" for jellybeans
colorscheme jellybeans

let mapleader = ","
" =================== 단축키 ===================

" 현재 파일 기준 NERDTree 열기
nmap ,t :NERDTreeFind<CR>
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-p> :w !python<CR>

map <leader>` :cclose <CR>
map <leader>2 :FZF <CR>
map <leader>3 :tabe <CR>
map <leader>4 :make -j40<CR>
map <leader>5 :make dist; make check -j40<CR>
map <leader>6 :!pytest % -x -s -vvv
map <leader>q :q! <CR>
map <leader>aq :wqa <CR>

nmap  -  <Plug>(choosewin)

nnoremap <silent> <leader>lp  :lprevious<CR>     " Go to previous syntastic error
nnoremap <silent> <leader>ln  :lnext<CR>         " Go to next syntastic error
nnoremap <silent> <C-d> :SyntasticReset<CR>

nnoremap <silent> <F2>   :cp<CR>            " Go to previous error line (compile result)
nnoremap <silent> <F3>   :cn<CR>            " Go to next error line (compile result)
" map <F4> :NERDTreeToggle<CR>
nmap <F5> :TagbarToggle<CR>
"nmap <F6> :SyntasticCheck gcc<CR>

noremap <F9> :Rgrep<CR>

nnoremap <leader>w :bp<CR>
nnoremap <leader>e :bn<CR>

" NERD Commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
map <leader>cc <plug>NERDComToggleComment
map <leader>c<space> <plug>NERDComComment




if $term == 'xterm-256color'
    set <S-F1>=
    set <S-F2>=
    set <S-F3>=
    set <S-F4>=
endif

" Disabling 'Alternate Screen'
" Refer to http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set autoindent        " always set autoindenting on

set nobackup        " do not keep a backup file, use versions instead
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
set laststatus=2    " Always include a status line, which shows filename,
                    " displayes [+] if file's been modified

set titlestring=%F\ %m\ %r\ %* " Display full path on the window title bar.
set stl=%<%f\ %h%m%r%=0x%B\ %-10.((col:%c,line:%l)\ %L\ Lines%) " Status line

set fileformat=unix
set foldcolumn=0

" Search options
set hlsearch
set ignorecase
set incsearch

" Insert 4 spaces instead of tab.
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set wildmenu
" set paste
set smartindent
set number


syntax on

" Keep buffer of 3 lines at each end of screen: top and bottom.
" set scrolloff=3

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8


" Making vim load c file plugin under the directory of filetye plugin
filetype plugin indent on

set cindent
set showcmd "visual mode 로 선택된 라인수 표기됨
set history=1000

" for indent guide
let g:indentguides_spacechar = '┆'
let g:indentguides_tabchar = '|'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

" for vim-airline
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline_theme='hybrid'
set laststatus=2 " turn on bottom bar
let mapleader = ","

" for blueyed/vim-diminactive
let g:diminactive_enable_focus = 1

syntax enable
filetype indent on
highlight Comment term=bold cterm=bold ctermfg=4

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

autocmd FileType Makefile                  setlocal noexpandtab
autocmd BufNewFile,BufRead *.i             setf c
autocmd BufNewFile,BufRead *.sc            setf c
autocmd BufNewFile,BufRead *.th,*.tc,*.ts  setf ruby
autocmd BufNewFile,BufRead *.re            setf lex
autocmd BufNewFile,BufRead *.ly            setf yacc
autocmd BufNewFile,BufRead *.idl           set ft=c


" Don't use Ex mode, use Q for formatting
map Q gq
" map K k

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

nnoremap <silent> <S-F2> :tp<cr>            " Go to previous tag
nnoremap <silent> <S-F3> :tn<cr>            " Go to next tag
nnoremap <silent> <F2>   :cp<cr>            " Go to previous error line (compile result)
nnoremap <silent> <F3>   :cn<cr>            " Go to next error line (compile result)
" nnoremap <silent> <S-F2> :cold<cr>          " Go to older quickfix window
" nnoremap <silent> <S-F3> :cnew<cr>          " Go to newer quickfix window


" Split window into two vertical widows.
" Each of them are of 80 column width and of 68 lines height.
" map <F7> <esc>:set columns=165<CR>:vs<CR>=:set lines=68<CR>

" Removing trailing white spaces
nnoremap <S-F12> :%s/\s\+$//g<CR>
" Making source code line foo(a, b, c,
"                         foo(a,
"                             b,
"                             c,
" meaning: , not followed by 1 or more traling white spaces
" :help \@!
nnoremap <S-F11> mr:s/,\(\s*$\)\@!/\r, /g<CR>=`r

nnoremap <S-F10> :!./maketags.sh<CR>

" Scroll screen by 3 lines. Upwards, downwards.
noremap <C-U> 5<C-U>
noremap <C-D> 5<C-D>

" Scroll screen without moving cursor. In insert mode.
inoremap <C-E> <C-O><C-E>
inoremap <C-Y> <C-O><C-Y>

" Making Ctrl-BS to erase a word before.
map! <C-BS> <C-W>


map <F4> <ESC>:!./run.sh<CR>
noremap <F6> :set invpaste<CR>
map <F7> <ESC>:e./<CR>
map <F8> <ESC>:set fileencoding=utf-8<CR>:w<CR>
noremap <F9> :Rgrep<CR>
map <F10> <ESC>:make -j 20<CR>
map <F11> <Esc>:%s/'nm_test_ix.*com'/self.mail_addr/g<CR>:w<CR>
map <F12> <Esc>:%s/\s\+$//e<CR>:w<CR>
noremap <F12> :%s/\s\+$/<CR>:w<CR>


nnoremap d "_d
vnoremap d "_d


" Note that grep's options are set by env variable GREP_OPTIONS
let Grep_Path = '/bin/grep'
let Grep_OpenQuickfixWindow = 1
let Grep_Default_Options = '-rn'

" Suppress beeping and flashing screen
if $OS_NAME == "osx"
    set vb " macvim beeps unless this option is set
    set noeb
else
    set vb t_vb=
    set novb " gvim flashes screen without this option
    set noeb
endif

" Decorate doxygen comment.
let g:load_doxygen_syntax=1
let g:doxygen_enhanced_color=1

" Useful stuffs though not being used.
" Mark trailing white space red. Applys only to c and cpp files.
"
" autocmd FileType c,cpp highlight WhitespaceEOL ctermbg=red guibg=red
" autocmd FileType c,cpp match WhitespaceEOL /\s\+$/

" Mark TAB character green.
"
" highlight WhitespaceTAB ctermbg=lightgreen guibg=lightgreen
" match WhitespaceTAB /\t\+/

set imactivatekey=S-space

" Because MacVim has its own color scheme,
" it does not display my own color scheme.
" This line keep MacVim from applying its own color scheme.

" if &diff
"     hi DiffChange ctermbg=153 " Light Light blue
"     hi DiffText   ctermbg=33 " Light blue
" endif
"
" hi Search ctermbg=14 ctermfg=1
" hi IncSearch ctermbg=14 ctermfg=1
set mouse=a
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

set noeb vb t_vb=

highlight ExtraWhitespace ctermbg=yellow guibg=yellow
match ExtraWhitespace /\s\+$/
